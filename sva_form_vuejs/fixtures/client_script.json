[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DocType",
  "enabled": 1,
  "modified": "2024-12-09 12:13:48.593803",
  "module": null,
  "name": "Add Min Max In Number Fields",
  "script": "frappe.ui.form.on('DocType', {\n    async refresh(frm) {\n        if (frm.docname === 'Assessment') {\n            const fieldTypes = ['Float', 'Int', 'Percent'];\n            let fields = [];\n\n            // Fetch fields dynamically based on fieldtype\n            try {\n                const response = await frappe.call({\n                    method: 'sva_form_vuejs.controllers.api.get_fields',\n                    args: { fieldtype: JSON.stringify(fieldTypes) }\n                });\n\n                if (response?.message?.length) {\n                    fields = response.message;\n                }\n            } catch (error) {\n                frappe.msgprint(__('Error fetching fields: ') + error.message);\n                return;\n            }\n\n            // Add custom button\n            frm.add_custom_button('Add Number Fields Property', () => {\n                const dialog = new frappe.ui.Dialog({\n                    title: 'Add Options for Assessment',\n                    fields: [\n                        {\n                            label: 'Question',\n                            fieldname: 'question',\n                            fieldtype: 'Autocomplete',\n                            reqd: true,\n                            options: fields.map(field => field.label),\n                            onchange: async function () {\n                                const selectedLabel = dialog.get_value('question');\n                                const selectedField = fields.find(f => f.label === selectedLabel);\n\n                                if (selectedField) {\n                                    try {\n                                        const criteriaResponse = await frappe.call({\n                                            method: 'sva_form_vuejs.controllers.api.get_criteria',\n                                            args: {\n                                                filters: {\n                                                    field: selectedField.fieldname,\n                                                    ref_doctype: 'Assessment'\n                                                }\n                                            }\n                                        });\n\n                                        const criteriaTable = dialog.fields_dict.scoring_criteria_child.grid;\n                                        criteriaTable.df.data = []; // Clear existing rows\n\n                                        if (criteriaResponse?.message?.length) {\n                                            criteriaResponse.message.forEach(criteria => {\n                                                criteriaTable.df.data.push({\n                                                    code: criteria.code,\n                                                    lower_limit:criteria.lower_limit,\n                                                    upper_limit: criteria.upper_limit,\n                                                    score: criteria.score\n                                                });\n                                            });\n                                            // Prefill min and max values\n                                            const existingCriteria = criteriaResponse.message[0]; // Assuming there's only one record per field\n                                            dialog.set_value('min', existingCriteria.min || 0);\n                                            dialog.set_value('max', existingCriteria.max || 0);\n                                        }\n\n                                        criteriaTable.refresh();\n                                    } catch (error) {\n                                        frappe.msgprint(__('Failed to fetch criteria: ') + error.message);\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            fieldname: 'min',\n                            label: 'Min',\n                            fieldtype: 'Int',\n                            // reqd: true\n                        },\n                        {\n                            fieldname: 'max',\n                            label: 'Max',\n                            fieldtype: 'Int',\n                            // reqd: true\n                        },\n                        {\n                            label: 'Criteria',\n                            fieldname: 'scoring_criteria_child',\n                            fieldtype: 'Table',\n                            fields: [\n                                {\n                                    fieldname: 'code',\n                                    label: 'Code',\n                                    fieldtype: 'Data',\n                                    in_list_view: 1,\n                                    reqd: true\n                                },\n                                {\n                                    fieldname: 'lower_limit',\n                                    label: 'From',\n                                    fieldtype: 'Float',\n                                    in_list_view: 1,\n                                    // reqd: true\n                                },\n                                {\n                                    fieldname: 'upper_limit',\n                                    label: 'To',\n                                    fieldtype: 'Float',\n                                    in_list_view: 1,\n                                    // reqd: true\n                                },\n                                {\n                                    fieldname: 'score',\n                                    label: 'Score',\n                                    fieldtype: 'Float',\n                                    in_list_view: 1,\n                                    reqd: true,\n                                    default: 0\n                                }\n                            ]\n                        }\n                    ],\n                    primary_action_label: 'Save',\n                    size: 'extra-large',\n                    async primary_action(data) {\n    // Validate inputs\n    if (!data.question || data.scoring_criteria_child.length === 0) {\n        frappe.msgprint(__('Please provide a question and at least one criterion.'));\n        return;\n    }\n\n    if (data.min >= data.max) {\n        frappe.msgprint(__('Min value must be less than Max value.'));\n        return;\n    }\n    \n    for (const criteria of data.scoring_criteria_child) {\n        if (criteria.lower_limit > criteria.upper_limit) {\n            frappe.msgprint(__('For each criterion, \"From\" must be less than or equal to \"To\".'));\n            return;\n        }\n    }\n    \n    const selectedField = fields.find(f => f.label === data.question);\n    if (!selectedField) {\n        frappe.msgprint(__('Invalid question selection.'));\n        return;\n    }\n\n    try {\n        // Fetch existing records for the selected question\n        const existingRecords = await frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Number field Scoring Logic',\n                filters: {\n                    field: selectedField.fieldname,\n                    ref_doctype: 'Assessment'\n                },\n                fields: ['name', 'code']\n            }\n        });\n\n        const existingCodes = existingRecords?.message?.map(record => record.code);\n\n        const docsToInsert = [];\n        const docsToUpdate = [];\n        const docsToDelete = existingRecords?.message?.filter(record => !data.scoring_criteria_child.map(option => option.code).includes(record.code));\n        \n        // Insert new criteria or update existing ones\n        data.scoring_criteria_child.forEach(criteria => {\n            if (existingCodes.includes(criteria.code)) {\n                // If the record exists, update it\n                const record = existingRecords.message.find(r => r.code === criteria.code);\n                if (record) {\n                    // docsToUpdate['min'] = data.min\n                    // docsToUpdate['max'] = data.max\n                    docsToUpdate.push({\n                        name: record.name,\n                        upper_limit: criteria.upper_limit,\n                        lower_limit: criteria.lower_limit,\n                        code: criteria.code,\n                        min:data.min,\n                        max:data.max,\n                        score: criteria.score || 0\n                    });\n                }\n            } else {\n                // If the record doesn't exist, insert a new one\n                // docsToInsert['min'] = data.min\n                // docsToInsert['max'] = data.max\n                docsToInsert.push({\n                    doctype: 'Number field Scoring Logic',\n                    ref_doctype: 'Assessment',\n                    field: selectedField.fieldname,\n                    upper_limit: criteria.upper_limit,\n                    lower_limit: criteria.lower_limit,\n                    code: criteria.code,\n                    min:data.min,\n                    max:data.max,\n                    score: criteria.score || 0\n                });\n            }\n        });\n        // console.log(docsToInsert,'i',docsToUpdate,'u',docsToDelete,'d')\n\n        // Perform the insert operation\n        if (docsToInsert.length) {\n            let res = await frappe.call({\n                method: 'frappe.client.insert_many',\n                args: { docs: docsToInsert }\n            });\n            if (res?.message?.length) {\n                frappe.show_alert({\n                    message: __('Criteria saved successfully!'),\n                    indicator: 'green'\n                });\n            }\n        }\n\n        // Perform the update operation\n        if (docsToUpdate.length) {\n            let res = await frappe.call({\n                method: 'sva_form_vuejs.controllers.api.update_many',\n                args: {\n                    dt: 'Number field Scoring Logic',\n                    docs: JSON.stringify(docsToUpdate)\n                }\n            });\n            if (res?.message?.status === 'success') {\n                frappe.show_alert({\n                    message: __('Criteria updated successfully!'),\n                    indicator: 'green'\n                });\n            }\n        }\n\n        // Perform the delete operation\n        if (docsToDelete.length) {\n            let res = await frappe.call({\n                method: 'sva_form_vuejs.controllers.api.delete_many',\n                args: {\n                    dt: 'Number field Scoring Logic',\n                    docs: JSON.stringify(docsToDelete)\n                }\n            });\n            if (res?.message?.status === 'success') {\n                frappe.show_alert({\n                    message: __('Criteria deleted successfully!'),\n                    indicator: 'green'\n                });\n            }\n        }\n\n    } catch (error) {\n        frappe.msgprint(__('Error saving criteria: ') + error.message);\n    }\n\n    dialog.hide();\n}\n\n                });\n\n                dialog.show();\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DocType",
  "enabled": 1,
  "modified": "2024-12-08 23:14:46.213595",
  "module": "sva_form",
  "name": "Add Options",
  "script": "frappe.ui.form.on('DocType', {\n    async refresh(frm) {\n        if (frm.docname === 'Assessment') {\n            let fields = [];\n            const fieldTypes = ['Link','Table MultiSelect'];\n            let response = await frappe.call({\n                method: 'sva_form_vuejs.controllers.api.get_fields',\n                args: { fieldtype: JSON.stringify(fieldTypes)}\n            });\n\n            if (response?.message?.length) {\n                fields = response.message;\n            }\n\n            frm.add_custom_button('Add Options', () => {\n                let dialog = new frappe.ui.Dialog({\n                    title: 'Add Options for Assessment',\n                    fields: [\n                        {\n                            label: 'Question',\n                            fieldname: 'question',\n                            fieldtype: 'Autocomplete',\n                            reqd: true,\n                            options: fields?.map(field => field?.label),\n                            onchange: async function () {\n                                const selected_label = dialog.get_value('question');\n                                const selected_field = fields?.find(f => f.label === selected_label);\n                                if (selected_field) {\n                                    try {\n                                        let r = await frappe.call({\n                                            method: 'sva_form_vuejs.controllers.api.get_option',\n                                            args: { \n                                                filters: {\n                                                    field: selected_field.fieldname, \n                                                    ref_doctype: 'Assessment' \n                                                }\n                                            },\n                                        });\n                                        if (r?.message?.length) {\n                                            let options_table = dialog.fields_dict.options.grid;\n                                            options_table.df.data = []; // Clear existing rows\n                                            r?.message?.forEach(option => {\n                                                options_table.df.data.push({\n                                                    label: option.label,\n                                                    code: option.level,\n                                                    depends_on: option.depends_on,\n                                                    group: option.group,\n                                                    score: option.score\n                                                });\n                                            });\n                                            options_table.refresh();\n                                        }\n                                    } catch (error) {\n                                        frappe.msgprint(__('Failed to fetch options: ') + error.message);\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            label: 'Options',\n                            fieldname: 'options',\n                            fieldtype: 'Table',\n                            fields: [\n                                {\n                                    fieldname: 'label',\n                                    label: 'Label',\n                                    fieldtype: 'Small Text',\n                                    in_list_view: 1,\n                                    reqd: true\n                                },\n                                {\n                                    fieldname: 'code',\n                                    label: 'Code',\n                                    fieldtype: 'Data',\n                                    in_list_view: 1,\n                                    reqd: true\n                                },\n                                {\n                                    fieldname: 'score',\n                                    label: 'Score',\n                                    fieldtype: 'Float',\n                                    in_list_view: 1,\n                                    reqd: true,\n                                    default: 0\n                                },\n                                {\n                                    fieldname: 'group',\n                                    label: 'Group',\n                                    fieldtype: 'Data',\n                                    in_list_view: 1\n                                },\n                                {\n                                    fieldname: 'depends_on',\n                                    label: 'Display Depends On',\n                                    fieldtype: 'Data',\n                                    in_list_view: 1\n                                }\n                            ]\n                        }\n                    ],\n                    primary_action_label: 'Save',\n                    size: 'extra-large',\n                    async primary_action(data) {\n                        if (!data?.question || data?.options?.length === 0) {\n                            frappe.msgprint(__('Please provide a question and at least one option.'));\n                            return;\n                        }\n\n                        let field = fields?.find(f => f.label === data?.question);\n\n                        if (field) {\n                            try {\n                                let existing_records = await frappe.call({\n                                    method: 'frappe.client.get_list',\n                                    args: {\n                                        doctype: 'Field Options',\n                                        filters: {\n                                            field: field?.fieldname,\n                                            ref_doctype: 'Assessment'\n                                        },\n                                        fields: ['name', 'code']\n                                    }\n                                });\n\n                                let existing_codes = existing_records?.message?.map(r => r.code);\n\n                                let docs_to_insert = [];\n                                let docs_to_update = [];\n                                let docs_to_delete = existing_records?.message?.filter((record)=> !data?.options?.map((option)=> option.code).includes(record.code));\n                                \n                                data?.options?.forEach(option => {\n                                    if (existing_codes?.includes(option.code)) {\n                                        let record = existing_records?.message?.find(r => r.code === option?.code);\n                                        docs_to_update.push({\n                                            name: record.name,\n                                            label: option.label,\n                                            depends_on: option?.depends_on,\n                                            group: option?.group,\n                                            score: option.score || 0\n                                        });\n                                    } else {\n                                        docs_to_insert.push({\n                                            doctype: \"Field Options\",\n                                            ref_doctype: 'Assessment',\n                                            field: field.fieldname,\n                                            label: option.label,\n                                            code: option.code,\n                                            depends_on: option?.depends_on,\n                                            group: option?.group,\n                                            score: option.score || 0\n                                        });\n                                    }\n                                });\n                                // console.log(docs_to_insert,'i',docs_to_update,'u',docs_to_delete,'d')\n\n                                if (docs_to_insert?.length) {\n                                  let res= await frappe.call({\n                                        method: 'frappe.client.insert_many',\n                                        args: { docs: docs_to_insert }\n                                    });\n                                    if (res?.message?.length){\n                                        frappe.show_alert({\n                                            message: __('Options saved successfully!'),\n                                            indicator: 'green'\n                                        });\n                                    }\n                                }\n\n                                if (docs_to_update?.length) {\n                                    let res = await frappe.call({\n                                        method: 'sva_form_vuejs.controllers.api.update_many',\n                                        args: {\n                                            dt: 'Field Options',\n                                            docs: JSON.stringify(docs_to_update)\n                                        }\n                                         \n                                    });\n                                    if (res?.message?.status == \"success\"){\n                                        frappe.show_alert({\n                                            message: __('Options updated successfully!'),\n                                            indicator: 'green'\n                                        });\n                                    }\n                                }\n                                \n                                if (docs_to_delete?.length) {\n                                    let res = await frappe.call({\n                                        method: 'sva_form_vuejs.controllers.api.delete_many',\n                                        args: {\n                                            dt: 'Field Options',\n                                            docs: JSON.stringify(docs_to_delete)\n                                        }\n                                        \n                                    });\n                                    if (res?.message?.status == \"success\"){\n                                        frappe.show_alert({\n                                            message: __('Options deleted successfully!'),\n                                            indicator: 'green'\n                                         });\n                                    }\n                                }\n\n                            } catch (error) {\n                                frappe.msgprint(__('Error saving options: ') + error.message);\n                            }\n                        } else {\n                            frappe.msgprint(__('Invalid question selection.'));\n                        }\n\n                        dialog.hide();\n                    }\n                });\n                dialog.show();\n            });\n        }\n    }\n});\n",
  "view": "Form"
 }
]